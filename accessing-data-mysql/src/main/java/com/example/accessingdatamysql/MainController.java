package com.example.accessingdatamysql;

import java.util.Date;
import java.util.Optional;
import org.aspectj.weaver.patterns.TypePatternQuestions.Question;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  @Autowired
  private StatusRepository statusRepository;
  @Autowired
  private TimeSheetRepository timeSheetRepository;

  @CrossOrigin(origins = "http://localhost:4200")
  @PostMapping(path="/addUser") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String name) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    User n = new User();
    n.setName(name);
    userRepository.save(n);
    return "Saved";
  }

  @CrossOrigin(origins = "http://localhost:4200")
  @PostMapping(path="/addStatus") // Map ONLY POST Requests
  public @ResponseBody String addNewStatus (@RequestParam String status) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Status n = new Status();
    n.setStatus(status);
    statusRepository.save(n);
    return "Saved";
  }

  @CrossOrigin(origins = "http://localhost:4200")
  @PostMapping(path="/addTimesheet") // Map ONLY POST Requests
  public @ResponseBody String addNewTimesheet (@RequestParam String project, @RequestParam String task, @RequestParam Date fromDate, @RequestParam Date toDate, @RequestParam Integer statusId, @RequestParam Integer userId ) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    Optional<User> user = userRepository.findById(userId);
    Optional<Status> status = statusRepository.findById(statusId);
    
    Timesheet n = new Timesheet();
    n.setProject(project);
    n.setTask(task);
    n.setFrom(fromDate);
    n.setTo(toDate);
    
    if(user.isPresent()){
        n.setUser(user.get());
    }

    if(status.isPresent()){
        n.setStatus(status.get());
    }
    timeSheetRepository.save(n);
    return "Saved";
  }

  @CrossOrigin(origins = "http://localhost:4200")
  @GetMapping(path="/allTimeSheet")
  public @ResponseBody Iterable<Timesheet> getAllTimesheets() {
    // This returns a JSON or XML with the users
    return timeSheetRepository.findAll();
  }

  @CrossOrigin(origins = "http://localhost:4200")
  @GetMapping(path="/allUser")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }

  @CrossOrigin(origins = "http://localhost:4200")
  @GetMapping(path="/allStatus")
  public @ResponseBody Iterable<Status> getAllStatuses() {
    // This returns a JSON or XML with the users
    return statusRepository.findAll();
  }

  @CrossOrigin(origins = "http://localhost:4200")
  @PostMapping(path="/searchTask")
  public @ResponseBody Iterable<Timesheet> searchTask(@RequestParam String searchTask) {
    // This returns a JSON or XML with the users
    return timeSheetRepository.getTask(searchTask);
  }

  @CrossOrigin(origins = "http://localhost:4200")
  @PostMapping(path="/editTimesheet")
  public @ResponseBody String editTimesheet (@RequestParam Integer timesheetId, @RequestParam String project, @RequestParam String task, @RequestParam Date fromDate, @RequestParam Date toDate, @RequestParam Integer statusId, @RequestParam Integer userId) {
    // This returns a JSON or XML with the users
    Optional<User> user = userRepository.findById(userId);
    Optional<Status> status = statusRepository.findById(statusId);
    Optional<Timesheet> timesheet = timeSheetRepository.findById(timesheetId);

    if (timesheet.isPresent()){
      Timesheet n = timesheet.get();
      n.setProject(project);
      n.setTask(task);
      n.setFrom(fromDate);
      n.setTo(toDate);
      
      if(user.isPresent()){
          n.setUser(user.get());
      }

      if(status.isPresent()){
          n.setStatus(status.get());
      }

      timeSheetRepository.save(n);
      return "Saved";  
    }

    else {
      return "Timesheet Not Found";
    }

    
  }

  @CrossOrigin(origins = "http://localhost:4200")
  @PostMapping(path="/deleteTimesheet")
  public @ResponseBody String deleteTimesheet (@RequestParam Integer timesheetId){

    timeSheetRepository.deleteById(timesheetId);
    return "Deleted";
  }
  
}